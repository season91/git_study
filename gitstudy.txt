사용자 A,B가 작성한 파일입니다.
1. 계정 정보 등록
	git config --global user.name 'season91'
	git config --global user.email 'choayoung91@naver.com'

 -> 우리수업 파일에 git폴더 만들고 그 안에 사용자 2개를 만든다.
 -> cmd로 userA로 경로이동한다. 이 폴더를 깃이 관리하는 폴더로 만들어 줄 것이다.
	cd /C/CODE/git/userA 
 -> 복사하기 insert, 붙여넣기 shift insert

2. 폴더를 git이 관리하는 폴더로 만들기
	git init
	git checkout -b main : main 브랜치를 만들어 해당 브랜치로 이동(git이 기본값이 main으로 바껴서그럼)
	git status : 현재 상태 확인

3. 파일을 생성하고 add, coomit 해보기
	git add : 변경이 있었던 파일을 staging area에 추가
	-> git add gitstudy.txt : 새로운 파일이 추가되었다면 add. 아직 commit상태는 아님
	git commit : 변경 내용을 기록
	-> git commit -m '[A]처음으로 git commit한 날' : 메시지부분으로 나중에 알아봐야하니까 자세히 적을 것.
	git log : log 확인
	
4. 파일을 수정하고 add, commit 해보기
	-> 원래 수정은 파일별로 하는게 아니고 한꺼번에 하는 것 임
	git add . : 수정내역이 있는 모든 파일을 staging area 추가
	git commit : commit 메세지를 자세히 적어야 한다면 -m 옵션을 제외하고 commit 진행.
	text 에디터가 나오면 i를 눌러 입력모드로 전환하고 메세지를 구체적으로 작성한 후 esc + : + wq(저장하고 나가기)를 입력해 commit 완료
	
5. git reset
	git reset --soft <commit id> : 내역을 되돌리고 commit을 취소 (staging 상태) 파일 안되돌림
	git reset --mixed <commit id> : 기본값, 내역을 되돌리고 staging 취소. 파일 안되돌림
	git reset --hard <commit id> : 해당 commit 지점으로 파일을 되돌린다.
	reset을 하면 내역을 되돌리기 때문에 log 명령어로 commit id를 볼 수 없다.
	git reflog : 모든 내역을 확인하는 reflog를 사용해 모든 commit id 확인 가능.
	-> git reset --hard e2090dd : commitid는 git log에서 확인가능 하다.
	
6. git revert
	git revert <commit id> : 파일을 해당 commit 지점으로 되돌리고 revert log를 남긴다.
	
7. git hub랑 연결하기
	git remote add origin <링크> : 깃헙 링크 작성.
	git remote -v : 버전확인.
	git pull해주기
	git push origin main : 우리가 main브랜치니까 main브랜치로 넣어주기
	
8. 공통모듈 수정시
	충돌날 때 
	pull한다음 push하기
	push할때 같은 줄 수정시 상호출동나면 그부분 수정한 후 add 해주구 commit 해야 merging상태가 사라진다